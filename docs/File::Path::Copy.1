.\" Automatically generated by Pod::To::Man 1.2.1
.\"
.pc
.TH File::Path::Copy- 3rakumod "2025-07-11" "rakudo (2025.05)" "User Contributed Raku Documentation"
.SH File::Path::Copy
.SH Module File::Path::Copy
.SS Table of Contents
.RS 2n
.IP \(bu 2m
NAME [#name]
.RE
.RS 2n
.IP \(bu 2m
AUTHOR [#author]
.RE
.RS 2n
.IP \(bu 2m
VERSION [#version]
.RE
.RS 2n
.IP \(bu 2m
TITLE [#title]
.RE
.RS 2n
.IP \(bu 2m
SUBTITLE [#subtitle]
.RE
.RS 2n
.IP \(bu 2m
COPYRIGHT [#copyright]
.RE
.RS 2n
.IP \(bu 2m
Introduction [#introduction]
.RE
.RS 2n
.IP \(bu 2m
Motivation [#motivation]
.RE
.RS 2n
.IP \(bu 2m
sub copypath(\&.\&.\&.) is export [#sub-copypath-is-export]
.RE
.RS 2n
.IP \(bu 2m
sub prunepath(\&.\&.\&.) is export [#sub-prunepath-is-export]
.RE
.RS 2n
.IP \(bu 2m
sub emptypath(\&.\&.\&.) is export [#sub-emptypath-is-export]
.RE
.SH "NAME"
File::Path::Copy 
.SH "AUTHOR"
Francis Grizzly Smit (grizzly@smit\&.id\&.au)
.SH "VERSION"
v0\&.1\&.0
.SH "TITLE"
File::Path::Copy
.SH "SUBTITLE"
A Raku module for recursively copying files\&.
.SH "COPYRIGHT"
GPL V3\&.0+ LICENSE [https://github.com/grizzlysmit/File::Path::Copy/blob/main/LICENSE]

Top of Document [#table-of-contents]
.SH Introduction

This is a Raku module to recursively copy files\&. 
.SS Motivation

None of the other modules I tried worked so here is mine\&. 

Table of Contents [#table-of-contents]
.SH sub copypath(\&.\&.\&.) is export

.RS 4m
.EX
sub copypath(IO::Path $from, IO::Path $to,
                Bool:D :d(:$dontrecurse) = False, Bool:D :c(:$createonly) = False,
                Bool:D :n(:$no\-to\-check) = False, Bool:D :$backtrace = False,
                Bool:D :$noErrorMessages = False \-\-> Bool:D) is export 


.EE
.RE
.P
Copy the $from path to the $to path recursively by default\&.

Where
.RS 2n
.IP \(bu 2m
$from The path to copy from\&.
.RE
.RS 2n
.IP \(bu 2m
$to The path to copy to\&.
.RE
.RS 2n
.IP \(bu 2m
:d :$dontrecurse Don't copy recursively, by default it will copy recursively\&.
.RE
.RS 2n
.IP \(bu 2m
:c :$createonly Makes it an Error to try to overwrite a file\&.
.RE
.RS 2n
.IP \(bu 2m
:n :$no\-to\-check Don't do the check on whether the to file is the same as the source\&.
.RE
.RS 2n
.IP \(bu 2m
i\&.e\&. normally will check if $from\&.basename eq $to\&.basename if so then will try to copy $from/* into $to/* note this includes \&. files; if this is true will not do this\&.
.RE
.RS 2n
.IP \(bu 2m
:$backtrace Show backtrace messages for any error messages\&.
.RE
.RS 2n
.IP \(bu 2m
:$noErrorMessages Don't show error messages\&.
.RE

Table of Contents [#table-of-contents]
.SH sub prunepath(\&.\&.\&.) is export

.RS 4m
.EX
sub prunepath(IO::Path $path, Bool:D :$backtrace = False,
                Bool:D :$noErrorMessages = False \-\-> Bool:D) is export


.EE
.RE
.P
Remove a path and everything under it\&.

Where
.RS 2n
.IP \(bu 2m
$path The path to prune\&.
.RE
.RS 2n
.IP \(bu 2m
:$backtrace If true then write backtrace to any error messages\&. item1 :$noErrorMessages Don't show error messages\&.
.RE

Table of Contents [#table-of-contents]
.SH sub emptypath(\&.\&.\&.) is export

.RS 4m
.EX
sub emptypath(IO::Path $path, Bool:D :$backtrace = False,
                Bool:D :$noErrorMessages = False \-\-> Bool:D) is export


.EE
.RE
.P
Remove everything under a path, but leave the path\&.

Where
.RS 2n
.IP \(bu 2m
$path The path to prune\&.
.RE
.RS 2n
.IP \(bu 2m
:$backtrace If true then write backtrace to any error messages\&. item1 :$noErrorMessages Don't show error messages\&.
.RE

Table of Contents [#table-of-contents]

